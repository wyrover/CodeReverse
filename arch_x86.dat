////////////////////////////////////////////////////////////////////////////
// arch_x32.dat
// Copyright (C) 2015 Katayama Hirofumi MZ.  All rights reserved.
////////////////////////////////////////////////////////////////////////////
// This file is part of CodeReverse.
// This file might be incomplete and/or incorrect.
////////////////////////////////////////////////////////////////////////////
// [Attributes]
// .addr:   address
// .type:   type
// .bits:   size in bits
//
// [Types]
// $type.s8:    signed 8-bit type
// $type.u8:    unsigned 8-bit type
// $type.x8:    signed/unsigned 8-bit type
// $type.s16:   signed 16-bit type
// $type.u16:   unsigned 16-bit type
// $type.x16:   signed/unsigned 16-bit type
// $type.s32:   signed 32-bit type
// $type.u32:   unsigned 32-bit type
// $type.x32:   signed/unsigned 32-bit type
// $type.ptr(ty):   make a pointer type to the type ty
// $type.ref(ty):   make a base type of the ptr type ty
//
// [Values]
// .value:  value
// .svalue: signed value
// .uvalue: unsigned value
// .pvalue: pointer value
//
// [Functions]
// $fn.fname:   a call of the function named fname
////////////////////////////////////////////////////////////////////////////

define access $cpu = {
    {"edx_eax", 64},
    {"dx_ax", 32},
    {"eax", 32},
    {"ax", 16},
    {"al", 8},
    {"ah", 8},
    {"edx", 32},
    {"dx", 16},
    {"dl", 8},
    {"dh", 8},
    {"ebx", 32},
    {"bx", 16},
    {"bl", 8},
    {"bh", 8},
    {"ecx", 32},
    {"cx", 16},
    {"cl", 8},
    {"ch", 8},
    {"edi", 32},
    {"di", 16},
    {"esi", 32},
    {"si", 16},
    {"ebp", 32},
    {"bp", 16},
    {"esp", 32},
    {"sp", 16},
    {"eip", 32},
    {"ip", 16},
    {"eflags", 32},
    {"flags", 16},
    {"cs", 16},
    {"ds", 16},
    {"ss", 16},
    {"es", 16},
    {"fs", 16},
    {"gs", 16},
};

define access $flags = {
    {"OF", 1},
    {"DF", 1},
    {"IF", 1},
    {"TF", 1},
    {"SF", 1},
    {"ZF", 1},
    {"AF", 1},
    {"PF", 1},
    {"CF", 1},
};

define access $fpu = {
    {"st0", 80},
    {"st1", 80},
    {"st2", 80},
    {"st3", 80},
    {"st4", 80},
    {"st5", 80},
    {"st6", 80},
    {"st7", 80},
    {"control", 16},
    {"status", 16},
    {"tag", 16},
    {"instruction", 64},
    {"operand", 64},
};

define access $sse = {
    {"mm0", 64},
    {"mm1", 64},
    {"mm2", 64},
    {"mm3", 64},
    {"mm4", 64},
    {"mm5", 64},
    {"mm6", 64},
    {"mm7", 64},
    {"xmm0", 128},
    {"xmm1", 128},
    {"xmm2", 128},
    {"xmm3", 128},
    {"xmm4", 128},
    {"xmm5", 128},
    {"xmm6", 128},
    {"xmm7", 128},
    {"mxcsr", 32},
};

////////////////////////////////////////////////////////////////////////////
// update's

//
// updating low bytes
//

pattern {
    update $cpu.al;
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $cpu.ah as v2;
    commit v2;
    renew $cpu.ax as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFF00));
    commit v3;
    update_upward $cpu.ax;
    // dx:ax
    renew $cpu.dx as v4;
    commit v4;
    renew $cpu.ax as v5;
    commit v5;
    reset $cpu.dx_ax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 16));
    commit v6;
    // edx:eax
    renew $cpu.edx as v7;
    commit v7;
    renew $cpu.eax as v8;
    commit v8;
    reset $cpu.edx_eax as v9;
    v9.uvalue = (v8.uvalue | (v7.uvalue << 32));
    commit v9;
}

pattern {
    update $cpu.bl;
} code {
    renew $cpu.bl as v1;
    commit v1;
    renew $cpu.bh as v2;
    commit v2;
    renew $cpu.bx as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFF00));
    commit v3;
    update_upward $cpu.bx;
}

pattern {
    update $cpu.cl;
} code {
    renew $cpu.cl as v1;
    commit v1;
    renew $cpu.ch as v2;
    commit v2;
    renew $cpu.cx as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFF00));
    commit v3;
    update_upward $cpu.cx;
}

pattern {
    update $cpu.dl;
} code {
    renew $cpu.dl as v1;
    commit v1;
    renew $cpu.dh as v2;
    commit v2;
    renew $cpu.dx as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFF00));
    commit v3;
    update_upward $cpu.dx;
    // dx:ax
    renew $cpu.dx as v4;
    commit v4;
    renew $cpu.ax as v5;
    commit v5;
    reset $cpu.dx_ax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 16));
    commit v6;
    // edx:eax
    renew $cpu.edx as v7;
    commit v7;
    renew $cpu.eax as v8;
    commit v8;
    reset $cpu.edx_eax as v9;
    v9.uvalue = (v8.uvalue | (v7.uvalue << 32));
    commit v9;
}

//
// updating high bytes
//

pattern {
    update $cpu.ah;
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $cpu.ah as v2;
    commit v2;
    renew $cpu.ax as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue << 8));
    commit v3;
    update_upward $cpu.ax;
    //
    renew $cpu.dx as v4;
    commit v4;
    renew $cpu.ax as v5;
    commit v5;
    reset $cpu.dx_ax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 16));
    commit v6;
    //
    renew $cpu.edx as v7;
    commit v7;
    renew $cpu.eax as v8;
    commit v8;
    reset $cpu.edx_eax as v9;
    v9.uvalue = (v8.uvalue | (v7.uvalue << 32));
    commit v9;
}

pattern {
    update $cpu.bh;
} code {
    renew $cpu.bl as v1;
    commit v1;
    renew $cpu.bh as v2;
    commit v2;
    renew $cpu.bx as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue << 8));
    commit v3;
    update_upward $cpu.bx;
}

pattern {
    update $cpu.ch;
} code {
    renew $cpu.cl as v1;
    commit v1;
    renew $cpu.ch as v2;
    commit v2;
    renew $cpu.cx as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue << 8));
    commit v3;
    update_upward $cpu.cx;
}

pattern {
    update $cpu.dh;
} code {
    renew $cpu.dl as v1;
    commit v1;
    renew $cpu.dh as v2;
    commit v2;
    renew $cpu.dx as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue << 8));
    commit v3;
    update_upward $cpu.dx;
    // dx:ax
    renew $cpu.dx as v4;
    commit v4;
    renew $cpu.ax as v5;
    commit v5;
    reset $cpu.dx_ax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 16));
    commit v6;
    // edx:eax
    renew $cpu.edx as v7;
    commit v7;
    renew $cpu.eax as v8;
    commit v8;
    reset $cpu.edx_eax as v9;
    v9.uvalue = (v8.uvalue | (v7.uvalue << 32));
    commit v9;
}

//
// updating words upward
//

pattern {
    update_upward $cpu.ax;
} code {
    renew $cpu.ax as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

pattern {
    update_upward $cpu.bx;
} code {
    renew $cpu.bx as v1;
    commit v1;
    renew $cpu.ebx as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

pattern {
    update_upward $cpu.cx;
} code {
    renew $cpu.cx as v1;
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

pattern {
    update_upward $cpu.dx;
} code {
    renew $cpu.ax as v1;
    commit v1;
    renew $cpu.dx as v2;
    commit v2;
    renew $cpu.dx_ax as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
    renew $cpu.edx as v4;
    commit v4;
    renew v4 as v5;
    v5.uvalue = (v1.uvalue | (v4.uvalue & 0xFFFF0000));
    commit v5;
}

pattern {
    update_upward $cpu.di;
} code {
    renew $cpu.di as v1;
    commit v1;
    renew $cpu.edi as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

pattern {
    update_upward $cpu.si;
} code {
    renew $cpu.si as v1;
    commit v1;
    renew $cpu.esi as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

pattern {
    update_upward $cpu.bp;
} code {
    renew $cpu.bp as v1;
    commit v1;
    renew $cpu.ebp as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

pattern {
    update_upward $cpu.sp;
} code {
    renew $cpu.sp as v1;
    commit v1;
    renew $cpu.esp as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | (v2.uvalue & 0xFFFF0000));
    commit v3;
}

//
// updating words downward
//

pattern {
    update_downward $cpu.ax;
} code {
    renew $cpu.ax as v1;
    commit v1;
    renew $cpu.al as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    renew $cpu.ah as v3;
    v3.uvalue = (v1.uvalue >> 8) & 0xFF;
    commit v3;
}

pattern {
    update_downward $cpu.bx;
} code {
    renew $cpu.bx as v1;
    commit v1;
    renew $cpu.bl as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    renew $cpu.bh as v3;
    v3.uvalue = (v1.uvalue >> 8) & 0xFF;
    commit v3;
}

pattern {
    update_downward $cpu.cx;
} code {
    renew $cpu.cx as v1;
    commit v1;
    renew $cpu.cl as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    renew $cpu.ch as v3;
    v3.uvalue = (v1.uvalue >> 8) & 0xFF;
    commit v3;
}

pattern {
    update_downward $cpu.dx;
} code {
    renew $cpu.dx as v1;
    commit v1;
    renew $cpu.dl as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    renew $cpu.dh as v3;
    v3.uvalue = (v1.uvalue >> 8) & 0xFF;
    commit v3;
}

//
// updating words
//

pattern {
    update $cpu.ax;
} code {
    update_downward $cpu.ax;
    update_upward $cpu.ax;
    // dx:ax
    renew $cpu.dx as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    reset $cpu.dx_ax as v3;
    v3.uvalue = (v2.uvalue | (v1.uvalue << 16));
    commit v3;
    // edx:eax
    renew $cpu.edx as v4;
    commit v4;
    renew $cpu.eax as v5;
    commit v5;
    reset $cpu.edx_eax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 32));
    commit v6;
}

pattern {
    update $cpu.bx;
} code {
    update_downward $cpu.bx;
    update_upward $cpu.bx;
}

pattern {
    update $cpu.cx;
} code {
    update_downward $cpu.cx;
    update_upward $cpu.cx;
}

pattern {
    update $cpu.dx;
} code {
    update_downward $cpu.dx;
    update_upward $cpu.dx;
    // dx:ax
    renew $cpu.dx as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    reset $cpu.dx_ax as v3;
    v3.uvalue = (v2.uvalue | (v1.uvalue << 16));
    commit v3;
    // edx:eax
    renew $cpu.edx as v4;
    commit v4;
    renew $cpu.eax as v5;
    commit v5;
    reset $cpu.edx_eax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 32));
    commit v6;
}

pattern {
    update $cpu.di;
} code {
    update_upward $cpu.di;
}

pattern {
    update $cpu.si;
} code {
    update_upward $cpu.si;
}

pattern {
    update $cpu.bp;
} code {
    update_upward $cpu.bp;
}

pattern {
    update $cpu.sp;
} code {
    update_upward $cpu.sp;
}

//
// updating dwords downward
//

pattern {
    update_downward $cpu.eax;
} code {
    renew $cpu.eax as v1;
    commit v1;
    renew $cpu.ax as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.ax;
}

pattern {
    update_downward $cpu.ebx;
} code {
    renew $cpu.ebx as v1;
    commit v1;
    renew $cpu.bx as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.bx;
}

pattern {
    update_downward $cpu.ecx;
} code {
    renew $cpu.ecx as v1;
    commit v1;
    renew $cpu.cx as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.cx;
}

pattern {
    update_downward $cpu.edx;
} code {
    renew $cpu.edx as v1;
    commit v1;
    renew $cpu.dx as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.dx;
}

pattern {
    update_downward $cpu.edi;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.di as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.di;
}

pattern {
    update_downward $cpu.esi;
} code {
    renew $cpu.esi as v1;
    commit v1;
    renew $cpu.si as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.si;
}

pattern {
    update_downward $cpu.ebp;
} code {
    renew $cpu.ebp as v1;
    commit v1;
    renew $cpu.bp as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.bp;
}

pattern {
    update_downward $cpu.esp;
} code {
    renew $cpu.esp as v1;
    commit v1;
    renew $cpu.sp as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.sp;
}

pattern {
    update_downward $cpu.r8d;
} code {
    renew $cpu.r8d as v1;
    commit v1;
    renew $cpu.r8w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r8w;
}

pattern {
    update_downward $cpu.r9d;
} code {
    renew $cpu.r9d as v1;
    commit v1;
    renew $cpu.r9w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r9w;
}

pattern {
    update_downward $cpu.r10d;
} code {
    renew $cpu.r10d as v1;
    commit v1;
    renew $cpu.r10w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r10w;
}

pattern {
    update_downward $cpu.r11d;
} code {
    renew $cpu.r11d as v1;
    commit v1;
    renew $cpu.r11w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r11w;
}

pattern {
    update_downward $cpu.r12d;
} code {
    renew $cpu.r12d as v1;
    commit v1;
    renew $cpu.r12w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r12w;
}

pattern {
    update_downward $cpu.r13d;
} code {
    renew $cpu.r13d as v1;
    commit v1;
    renew $cpu.r13w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r13w;
}

pattern {
    update_downward $cpu.r14d;
} code {
    renew $cpu.r14d as v1;
    commit v1;
    renew $cpu.r14w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r14w;
}

pattern {
    update_downward $cpu.r15d;
} code {
    renew $cpu.r15d as v1;
    commit v1;
    renew $cpu.r15w as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.r15w;
}

pattern {
    update_downward $cpu.esp;
} code {
    renew $cpu.esp as v1;
    commit v1;
    renew $cpu.sp as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.sp;
}

pattern {
    update_downward $cpu.eip;
} code {
    renew $cpu.eip as v1;
    commit v1;
    renew $cpu.ip as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    update_downward $cpu.ip;
}

pattern {
    update_downward $cpu.eflags;
} code {
    renew $cpu.eflags as v1;
    commit v1;
    renew $cpu.flags as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
}

//
// updating dwords
//

pattern {
    update $cpu.eax;
} code {
    update_downward $cpu.eax;
    // dx:ax
    renew $cpu.dx as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    reset $cpu.dx_ax as v3;
    v3.uvalue = (v2.uvalue | (v1.uvalue << 16));
    commit v3;
    // edx:eax
    renew $cpu.edx as v4;
    commit v4;
    renew $cpu.eax as v5;
    commit v5;
    reset $cpu.edx_eax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 32));
    commit v6;
}

pattern {
    update $cpu.ebx;
} code {
    update_downward $cpu.ebx;
}

pattern {
    update $cpu.ecx;
} code {
    update_downward $cpu.ecx;
}

pattern {
    update $cpu.edx;
} code {
    update_downward $cpu.edx;
    // dx:ax
    renew $cpu.dx as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    reset $cpu.dx_ax as v3;
    v3.uvalue = (v2.uvalue | (v1.uvalue << 16));
    commit v3;
    // edx:eax
    renew $cpu.edx as v4;
    commit v4;
    renew $cpu.eax as v5;
    commit v5;
    reset $cpu.edx_eax as v6;
    v6.uvalue = (v5.uvalue | (v4.uvalue << 32));
    commit v6;
}

pattern {
    update $cpu.edi;
} code {
    update_downward $cpu.edi;
}

pattern {
    update $cpu.esi;
} code {
    update_downward $cpu.esi;
}

pattern {
    update $cpu.ebp;
} code {
    update_downward $cpu.ebp;
}

pattern {
    update $cpu.esp;
} code {
    update_downward $cpu.esp;
}

pattern {
    update $cpu.esp;
} code {
    update_downward $cpu.esp;
}

pattern {
    update $cpu.eip;
} code {
    update_downward $cpu.eip;
}

pattern {
    update $cpu.eflags;
} code {
    update_downward $cpu.eflags;
}

////////////////////////////////////////////////////////////////////////////
// technical

pattern {
    asm push $1;
    asm pop $1;
} code {
}

pattern {
    asm push $1;
    asm push $2;
    asm pop $2;
    asm pop $1;
} code {
}

pattern {
    asm push $1;
    asm push $2;
    asm push $3;
    asm pop $3;
    asm pop $2;
    asm pop $1;
} code {
}

pattern {
    asm push $1;
    asm push $2;
    asm push $3;
    asm push $4;
    asm pop $4;
    asm pop $3;
    asm pop $2;
    asm pop $1;
} code {
}

pattern {
    asm push $1;
    asm pop $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    v2.value = v1.value;
    commit v2;
    update $2;
}

pattern {
    asm push $1;
    asm push $2;
    asm pop $3;
    asm pop $4;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew $3 as v3;
    v3.value = v2.value;
    commit v3;
    renew $4 as v4;
    v4.value = v1.value;
    commit v4;
    update $3;
    update $4;
}

pattern {
    asm push $1;
    asm push $2;
    asm push $3;
    asm pop $4;
    asm pop $5;
    asm pop $6;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew $3 as v3;
    commit v3;
    renew $4 as v4;
    v4.value = v3.value;
    commit v4;
    renew $5 as v5;
    v5.value = v2.value;
    commit v5;
    renew $6 as v6;
    v6.value = v1.value;
    commit v6;
    update $4;
    update $5;
    update $6;
}

pattern {
    asm push $1;
    asm push $2;
    asm push $3;
    asm push $4;
    asm pop $5;
    asm pop $6;
    asm pop $7;
    asm pop $8;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew $3 as v3;
    commit v3;
    renew $4 as v4;
    commit v4;
    renew $5 as v5;
    v5.value = v4.value;
    commit v5;
    renew $6 as v6;
    v6.value = v3.value;
    commit v6;
    renew $7 as v7;
    v7.value = v2.value;
    commit v7;
    renew $8 as v8;
    v8.value = v1.value;
    commit v8;
    update $5;
    update $6;
    update $7;
    update $8;
}

pattern {
    asm push $1;
    asm push $2;
    asm push $3;
    asm push $4;
    asm push $5;
    asm pop $6;
    asm pop $7;
    asm pop $8;
    asm pop $9;
    asm pop $10;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew $3 as v3;
    commit v3;
    renew $4 as v4;
    commit v4;
    renew $5 as v5;
    commit v5;
    renew $6 as v6;
    v6.value = v5.value;
    commit v6;
    renew $7 as v7;
    v7.value = v4.value;
    commit v7;
    renew $8 as v8;
    v8.value = v3.value;
    commit v8;
    renew $9 as v9;
    v9.value = v2.value;
    commit v9;
    renew $10 as v10;
    v10.value = v1.value;
    commit v10;
    update $6;
    update $7;
    update $8;
    update $9;
    update $10;
}

pattern {
    assert($cpu.eax.value == 0);
    assert($cpu.ecx.value == 0xFFFFFFFF);
    asm repne scasb;
    asm not ecx;
    asm lea $1, [ecx-1];
} code {
    renew $cpu.edi as v1;
    v1.type = $type.ptr($type.s8);
    commit v1;
    new v2;
    v2.addr = $1.addr;
    v2.bits = 32;
    v2.type = $type.u32;
    v2.uvalue = $fn.strlen(v1.pvalue);
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue + v2.value;
    commit v3;
    renew $cpu.ecx as v4;
    v4.value = 0;
    commit v4;
    update $cpu.ecx;
}

pattern {
    asm cdq;
    asm xor eax, edx;
    asm sub eax, edx;
} code {
    renew $cpu.eax as v1;
    commit v1;
    renew v1 as v2;
    v2.value = $fn.abs(v1.value);
    commit v2;
    update $cpu.eax;
}

pattern {
    asm push ebp;
    asm mov ebp, esp;
    asm sub esp, $1;
} code {
    asm enter $1, 0;
}

pattern {
    asm push ebp;
    asm mov ebp, esp;
} code {
    asm enter 0, 0;
}

pattern {
    asm mov esp, ebp;
    asm pop ebp;
} code {
    asm leave;
}

pattern {
    asm xor $1, $1;
    asm not $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    v1.svalue = -1;
    v1.uvalue = 0xFFFFFFFF;
    commit v1;
    assert(v1.uvalue == 0xFFFFFFFF);
    assert(v1.svalue == -1);
    update $1;
}

pattern {
    asm xor $1, $1;
    asm not $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    v1.svalue = -1;
    v1.uvalue = 0xFFFF;
    commit v1;
    assert(v1.uvalue == 0xFFFF);
    assert(v1.svalue == -1);
    update $1;
}

pattern {
    asm xor $1, $1;
    asm not $1;
    assert($1.bits == 8);
} code {
    renew $1 as v1;
    v1.svalue = -1;
    v1.uvalue = 0xFF;
    commit v1;
    assert(v1.uvalue == 0xFF);
    assert(v1.svalue == -1);
    update $1;
}

pattern {
    asm xor $1, $1;
    asm inc $1;
} code {
    renew $1 as v1;
    v1.value = 1;
    commit v1;
    $flags.OF = 0;
    $flags.SF = 0;
    $flags.ZF = 0;
    $flags.AF = unknown;
    $flags.PF = unknown;
    assert(v1.uvalue == 1);
    assert(v1.svalue == 1);
    update $1;
}

pattern {
    asm xor $1, $1;
    asm dec $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    v1.uvalue = 0xFFFFFFFF;
    v1.svalue = -1;
    commit v1;
    $flags.OF = 0;
    $flags.SF = 1;
    $flags.ZF = 0;
    $flags.AF = unknown;
    $flags.PF = unknown;
    assert(v1.uvalue == 0xFFFFFFFF);
    assert(v1.svalue == -1);
    update $1;
}

pattern {
    asm xor $1, $1;
    asm dec $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    v1.uvalue = 0xFFFF;
    v1.svalue = -1;
    commit v1;
    $flags.OF = 0;
    $flags.SF = 1;
    $flags.ZF = 0;
    $flags.AF = unknown;
    $flags.PF = unknown;
    assert(v1.uvalue == 0xFFFF);
    assert(v1.svalue == -1);
    update $1;
}

pattern {
    asm xor $1, $1;
    asm dec $1;
    assert($1.bits == 8);
} code {
    renew $1 as v1;
    v1.uvalue = 0xFF;
    v1.svalue = -1;
    commit v1;
    $flags.OF = 0;
    $flags.SF = 1;
    $flags.ZF = 0;
    $flags.AF = unknown;
    $flags.PF = unknown;
    assert(v1.uvalue == 0xFF);
    assert(v1.svalue == -1);
    update $1;
}

pattern {
    asm xor $1, $1;
} code {
    renew $1 as v1;
    v1.value = 0;
    commit v1;
    assert($1.value == 0);
    $flags.SF = 0;
    $flags.ZF = 1;
    $flags.OF = 0;
    $flags.CF = 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
    assert(v1.uvalue == 0);
    assert(v1.svalue == 0);
    update $1;
}

pattern {
    asm add $1, $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value * 2;
    commit v2;
    $flags.ZF = v2.value == 0;
    $flags.SF = v2.svalue < 0;
    $flags.CF = v2.uvalue < v1.uvalue;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm and $1, $1;
} code {
    renew $1 as v1;
    commit v1;
    $flags.ZF = v1.value == 0;
    $flags.SF = v1.svalue < 0;
    $flags.CF = 0;
    $flags.OF = 0;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm mov $1, $1;
} code {
}

pattern {
    asm movnti $1, $1;
} code {
}

pattern {
    asm or $1, $1;
} code {
    renew $1 as v1;
    commit v1;
    $flags.SF = 0;
    $flags.ZF = v1.value == 0;
    $flags.OF = 0;
    $flags.CF = 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

pattern {
    asm test $1, $1;
} code {
    renew $1 as v1;
    commit v1;
    $flags.ZF = v1.value == 0;
    $flags.SF = v1.svalue < 0;
    $flags.CF = 0;
    $flags.OF = 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

pattern {
    asm shr $1, 1;
    asm shr $1, 1;
    asm shr $1, 1;
    asm shr $1, 1;
    asm shr $1, 1;
} code {
    asm shr $1, 5;
}

pattern {
    asm shr $1, 1;
    asm shr $1, 1;
    asm shr $1, 1;
    asm shr $1, 1;
} code {
    asm shr $1, 4;
}

pattern {
    asm shr $1, 1;
    asm shr $1, 1;
    asm shr $1, 1;
} code {
    asm shr $1, 3;
}

pattern {
    asm shr $1, 1;
    asm shr $1, 1;
} code {
    asm shr $1, 2;
}

pattern {
    asm dec $1;
    asm dec $1;
    asm dec $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value - 3;
    commit v2;
    $flags.SF = v2.svalue < 0;
    $flags.ZF = v2.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm dec $1;
    asm dec $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value - 2;
    commit v2;
    $flags.SF = v2.svalue < 0;
    $flags.ZF = v2.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm inc $1;
    asm inc $1;
    asm inc $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value + 3;
    commit v2;
    $flags.SF = v2.svalue < 0;
    $flags.ZF = v2.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm inc $1;
    asm inc $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value + 2;
    commit v2;
    $flags.SF = v2.svalue < 0;
    $flags.ZF = v2.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

////////////////////////////////////////////////////////////////////////////
// instructions

pattern {
    asm aaa;
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $cpu.ah as v2;
    commit v2;
    new v3;
    v3.bits = 32;
    v3.value = (v1.value & 0x0F) >= 10 || $flags.AF.value;
    commit v3;
    if (v3.value) {
        renew v1 as v4;
        v4.value = (v1.value + 6) & 0x0F;
        commit v4;
        renew v2 as v5;
        v5.value = v2.value + 1;
        commit v5;
        $flags.AF = 1;
        $flags.CF = 1;
    } else {
        renew v1 as v6;
        v6.value = (v1.value & 0x0F);
        commit v6;
        $flags.AF = 0;
        $flags.CF = 0;
    }
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.PF = unknown;
    update $cpu.al, $cpu.ah;
}

pattern {
    asm aad;
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $cpu.ah as v2;
    commit v2;
    renew v1 as v3;
    v3.value = v1.value + v2.value * 10;
    commit v3;
    renew v2 as v4;
    v4.value = 0;
    commit v4;
    assert($cpu.ah.value == 0);
    $flags.ZF = v3.value == 0;
    $flags.SF = v3.svalue < 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.al, $cpu.ah;
}

pattern {
    asm aam;
} code {
    asm aam 10;
}

pattern {
    asm aam $1;
} code {
    renew $cpu.ah as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    renew v1 as v3;
    v3.value = v1.value / $1.value;
    commit v3;
    renew v2 as v4;
    v4.value = v1.value % $1.value;
    commit v4;
    $flags.ZF = v4.value == 0;
    $flags.SF = v4.svalue < 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.al, $cpu.ah;
}

pattern {
    asm aas;
} code {
    renew $cpu.ah as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    new v3;
    v3.bits = 32;
    v3.value = (v2.value & 0F) >= 10 || $flags.AF;
    commit v3;
    if (v3.value) {
        renew v2 as v4;
        v4.value = ((v2.value - 6) & 0x0F);
        commit v4;
        renew v1 as v5;
        v5.value = v1.value - 1;
        commit v5;
        $flags.AF = 1;
        $flags.CF = 1;
    } else {
        renew v2 as v6;
        v6.value = (v1.value & 0x0F);
        commit v6;
        $flags.AF = 0;
        $flags.CF = 0;
    }
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.PF = unknown;
    update $cpu.al, $cpu.ah;
}

pattern {
    asm adc $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = v1.value + v2.value + $flags.CF;
    commit v3;
    $flags.ZF = v3.value == 0;
    $flags.SF = v3.svalue < 0;
    $flags.CF = v3.uvalue < v1.uvalue;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    add $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = v1.value + v2.value;
    commit v3;
    $flags.ZF = v3.value == 0;
    $flags.SF = v3.svalue < 0;
    $flags.CF = v3.uvalue < v1.uvalue;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm and $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = (v1.value & v2.value);
    commit v3;
    $flags.ZF = v3.value == 0;
    $flags.SF = v3.svalue < 0;
    $flags.CF = 0;
    $flags.OF = 0;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

// arpl($dest, $src);
// bound($dest, $src);

pattern {
    asm bswap $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = $fn._bswap(v1.value);
    commit v2;
    update $1;
}

pattern {
    asm bt $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = (v1.value & (1 << v2.value));
    commit v3;
    $flags.CF = v3.value != 0;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm btc $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = (v1.value & (1 << v2.value));
    commit v3;
    $flags.CF = v3.value != 0;
    if (v3.value) {
        renew v1 as v2;
        v2.value = v1.value & ~(1 << $2.value);
        commit v2;
    } else {
        renew v1 as v3;
        v3.value = v1.value | (1 << $2.value);
        commit v3;
    }
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm btr $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = (v1.value & (1 << v2.value));
    commit v3;
    $flags.CF = v3.value != 0;
    new v3 as v4;
    v4.value = (v1.value & ~(1 << $2.value));
    commit v2;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm bts $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = (v1.value & (1 << v2.value));
    commit v3;
    $flags.CF = v3.value != 0;
    new v3 as v4;
    v4.value = (v1.value | (1 << v2.value));
    commit v4;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

pattern {
    asm call $1;
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.eax as v2;
    v2.value = v1.pvalue(...);
    commit v2;
}

pattern {
    asm cbw;
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $cpu.ax as v2;
    v2.svalue = v1.svalue;
    commit v2;
    update $cpu.ax;
}

pattern {
    asm cwde;
} code {
    renew $cpu.ax as v1;
    commit v1;
    renew $cpu.eax as v2;
    v2.svalue = v1.svalue;
    commit v2;
    update $cpu.eax;
}

pattern {
    asm clc
} code {
    $flags.CF = 0;
}

pattern {
    asm cld;
} code {
    $flags.DF = 0;
}

// clflush($m8);

pattern {
    asm cli;
} code {
    $flags.IF = 0;
}

// clts();

pattern {
    asm cmc;
} code {
    if ($flags.CF) {
        $flags.CF = 0;
    } else {
        $flags.CF = 1;
    }
}

pattern {
    asm cmova $1, $2;
} code {
    if (!($flags.CF || $flags.ZF)) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovae $1, $2;
} code {
    if ($flags.CF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovb $1, $2;
} code {
    if ($flags.CF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovbe $1, $2;
} code {
    if ($flags.CF || flags.ZF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovc $1, $2;
} code {
    if ($flags.CF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmove $1, $2;
} code {
    if ($flags.ZF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovg $1, $2;
} code {
    if (!$flags.ZF && $flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovge $1, $2;
} code {
    if ($flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovl $1, $2;
} code {
    if (!$flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovle $1, $2;
} code {
    if ($flags.ZF || !$flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovna $1, $2;
} code {
    if ($flags.CF || $flags.ZF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnae $1, $2;
} code {
    if ($flags.CF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    cmovnb $1, $2;
} code {
    if ($flags.CF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnbe $1, $2;
} code {
    if (!($flags.CF || $flags.ZF)) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnc $1, $2;
} code {
    if ($flags.CF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovne $1, $2;
} code {
    if ($flags.ZF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovng $1, $2;
} code {
    if ($flags.ZF || !$flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnge $1, $2;
} code {
    if (!$flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnl $1, $2;
} code {
    if ($flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnle $1, $2;
} code {
    if (!$flags.ZF && $flags.SFeqOF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovno $1, $2;
} code {
    if ($flags.OF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnp $1, $2;
} code {
    if ($flags.PF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovns $1, $2;
} code {
    if ($flags.SF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovnz $1, $2;
} code {
    if ($flags.ZF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovo $1, $2;
} code {
    if ($flags.OF == 1) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovp $1, $2;
} code {
    if ($flags.PF == 1) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovpe $1, $2;
} code {
    if ($flags.PF == 1) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovpo $1, $2;
} code {
    if ($flags.PF == 0) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovs $1, $2;
} code {
    if ($flags.SF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmovz $1, $2;
} code {
    if ($flags.ZF) {
        renew $1 as v1;
        v1.value = $2.value;
        commit v1;
        update $1;
    }
}

pattern {
    asm cmp $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    $flags.ZF = v1.value == v2.value;
    $flags.SF = v1.svalue < v2.svalue;
    $flags.OF = unknown;
    $flags.CF = v1.uvalue < v2.uvalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm cmpsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x8);
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 8;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v3.bits = 8;
    commit v4;
    $flags.ZF = v3.value == v4.value;
    $flags.SF = v3.svalue < v4.svalue;
    $flags.OF = unknown;
    $flags.CF = v3.uvalue < v4.uvalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
    if ($flags.DF == 0) {
        renew v1 as v5;
        v5.pvalue = v1.pvalue + 1;
        commit v5;
        renew v2 as v6;
        v6.pvalue = v2.pvalue + 1;
        commit v6;
    } else {
        renew v1 as v5;
        v5.pvalue = v1.pvalue - 1;
        commit v5;
        renew v2 as v6;
        v6.pvalue = v2.pvalue - 1;
        commit v6;
    }
    update $cpu.edi;
    update $cpu.esi;
}

pattern {
    asm cmpsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x16);
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 16;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v3.bits = 16;
    commit v4;
    $flags.ZF = v3.value == v4.value;
    $flags.SF = v3.svalue < v4.svalue;
    $flags.OF = unknown;
    $flags.CF = v3.uvalue < v4.uvalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
    if ($flags.DF == 0) {
        renew v1 as v5;
        v5.pvalue = v1.pvalue + 2;
        commit v5;
        renew v2 as v6;
        v6.pvalue = v2.pvalue + 2;
        commit v6;
    } else {
        renew v1 as v5;
        v5.pvalue = v1.pvalue - 2;
        commit v5;
        renew v2 as v6;
        v6.pvalue = v2.pvalue - 2;
        commit v6;
    }
    update $cpu.edi;
    update $cpu.esi;
}

pattern {
    asm cmpsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x32);
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 32;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v3.bits = 32;
    commit v4;
    $flags.ZF = v3.value == v4.value;
    $flags.SF = v3.svalue < v4.svalue;
    $flags.OF = unknown;
    $flags.CF = v3.uvalue < v4.uvalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
    if ($flags.DF == 0) {
        renew v1 as v5;
        v5.pvalue = v1.pvalue + 4;
        commit v5;
        renew v2 as v6;
        v6.pvalue = v2.pvalue + 4;
        commit v6;
    } else {
        renew v1 as v5;
        v5.pvalue = v1.pvalue - 4;
        commit v5;
        renew v2 as v6;
        v6.pvalue = v2.pvalue - 4;
        commit v6;
    }
    update $cpu.edi;
    update $cpu.esi;
}

pattern {
    asm repe cmpsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x8);
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v8 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v6 to v1;
        join v7 to v2;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 8;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.bits = 8;
        commit v5;
        $flags.SF = v4.svalue < v5.svalue;
        $flags.CF = v4.uvalue < v5.uvalue;
        $flags.ZF = v4.value == v5.value;
        if ($flags.ZF == 0) {
            break;
        }
        if ($flags.DF == 0) {
            renew v2 as v6;
            v6.pvalue = v2.pvalue + 1;
            commit v6;
        } else {
            renew v2 as v6;
            v6.pvalue = v2.pvalue - 1;
            commit v6;
        }
        renew v3 as v7;
        v7.uvalue = v3.uvalue - 1;
        commit v7;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.OF = unknown;
}

pattern {
    asm repe cmpsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x16);
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v8 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v6 to v1;
        join v7 to v2;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 16;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.bits = 16;
        commit v5;
        $flags.SF = v4.svalue < v5.svalue;
        $flags.CF = v4.uvalue < v5.uvalue;
        $flags.ZF = v4.value == v5.value;
        if ($flags.ZF == 0) {
            break;
        }
        if ($flags.DF == 0) {
            renew v2 as v6;
            v6.pvalue = v2.pvalue + 2;
            commit v6;
        } else {
            renew v2 as v6;
            v6.pvalue = v2.pvalue - 2;
            commit v6;
        }
        renew v3 as v7;
        v7.uvalue = v3.uvalue - 1;
        commit v7;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.OF = unknown;
}

pattern {
    asm repe cmpsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x32);
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v8 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v6 to v1;
        join v7 to v2;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 32;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.bits = 32;
        commit v5;
        $flags.SF = v4.svalue < v5.svalue;
        $flags.CF = v4.uvalue < v5.uvalue;
        $flags.ZF = v4.value == v5.value;
        if ($flags.ZF == 0) {
            break;
        }
        if ($flags.DF == 0) {
            renew v2 as v6;
            v6.pvalue = v2.pvalue + 4;
            commit v6;
        } else {
            renew v2 as v6;
            v6.pvalue = v2.pvalue - 4;
            commit v6;
        }
        renew v3 as v7;
        v7.uvalue = v3.uvalue - 1;
        commit v7;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.OF = unknown;
}

alias asm repz cmpsb = asm repe cmpsb;
alias asm repz cmpsw = asm repe cmpsw;
alias asm repz cmpsd = asm repe cmpsd;

pattern {
    asm repne cmpsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x8);
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v8 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v6 to v1;
        join v7 to v2;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 8;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.bits = 8;
        commit v5;
        $flags.SF = v4.svalue < v5.svalue;
        $flags.CF = v4.uvalue < v5.uvalue;
        $flags.ZF = v4.value == v5.value;
        if ($flags.ZF == 1) {
            break;
        }
        if ($flags.DF == 0) {
            renew v2 as v6;
            v6.pvalue = v2.pvalue + 1;
            commit v6;
        } else {
            renew v2 as v6;
            v6.pvalue = v2.pvalue - 1;
            commit v6;
        }
        renew v3 as v7;
        v7.uvalue = v3.uvalue - 1;
        commit v7;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.OF = unknown;
}

pattern {
    asm repne cmpsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x16);
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v8 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v6 to v1;
        join v7 to v2;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 16;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.bits = 16;
        commit v5;
        $flags.SF = v4.svalue < v5.svalue;
        $flags.CF = v4.uvalue < v5.uvalue;
        $flags.ZF = v4.value == v5.value;
        if ($flags.ZF == 1) {
            break;
        }
        if ($flags.DF == 0) {
            renew v2 as v6;
            v6.pvalue = v2.pvalue + 2;
            commit v6;
        } else {
            renew v2 as v6;
            v6.pvalue = v2.pvalue - 2;
            commit v6;
        }
        renew v3 as v7;
        v7.uvalue = v3.uvalue - 1;
        commit v7;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.OF = unknown;
}

pattern {
    asm repne cmpsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x32);
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v8 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v6 to v1;
        join v7 to v2;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 32;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.bits = 32;
        commit v5;
        $flags.SF = v4.svalue < v5.svalue;
        $flags.CF = v4.uvalue < v5.uvalue;
        $flags.ZF = v4.value == v5.value;
        if ($flags.ZF == 1) {
            break;
        }
        if ($flags.DF == 0) {
            renew v2 as v6;
            v6.pvalue = v2.pvalue + 4;
            commit v6;
        } else {
            renew v2 as v6;
            v6.pvalue = v2.pvalue - 4;
            commit v6;
        }
        renew v3 as v7;
        v7.uvalue = v3.uvalue - 1;
        commit v7;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.OF = unknown;
}

alias asm repnz cmpsb = asm repne cmpsb;
alias asm repnz cmpsw = asm repne cmpsw;
alias asm repnz cmpsd = asm repne cmpsd;

pattern {
    asm cmpxchg $1, $2;
    assert($1.bits == 32);
} code {
    renew $cpu.eax as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    $flags.SF = v1.svalue < v2.svalue;
    $flags.CF = v1.uvalue < v2.uvalue;
    $flags.PF = unknown;
    $flags.AF = unknown;
    if (v1.value == v2.value) {
        renew $2 as v3;
        commit v3;
        renew $1 as v4;
        v4.value = v3.value;
        commit v4;
        $flags.ZF = 1;
    } else {
        renew $1 as v5;
        commit v5;
        renew $cpu.eax as v6;
        v6.value = v5.value;
        commit v6;
        $flags.ZF = 0;
    }
}

pattern {
    asm cmpxchg $1, $2;
    assert($1.bits == 16);
} code {
    renew $cpu.ax as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    $flags.SF = v1.svalue < v2.svalue;
    $flags.CF = v1.uvalue < v2.uvalue;
    $flags.PF = unknown;
    $flags.AF = unknown;
    if (v1.value == v2.value) {
        renew $2 as v3;
        commit v3;
        renew $1 as v4;
        v4.value = v3.value;
        commit v4;
        $flags.ZF = 1;
    } else {
        renew $1 as v5;
        commit v5;
        renew $cpu.ax as v6;
        v6.value = v5.value;
        commit v6;
        $flags.ZF = 0;
    }
}

pattern {
    asm cmpxchg $1, $2
    assert($1.bits == 8);
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    $flags.SF = v1.svalue < v2.svalue;
    $flags.CF = v1.uvalue < v2.uvalue;
    $flags.PF = unknown;
    $flags.AF = unknown;
    if (v1.value == v2.value) {
        renew $2 as v3;
        commit v3;
        renew $1 as v4;
        v4.value = v3.value;
        commit v4;
        $flags.ZF = 1;
    } else {
        renew $1 as v5;
        commit v5;
        renew $cpu.al as v6;
        v6.value = v5.value;
        commit v6;
        $flags.ZF = 0;
    }
}

// cmpxchg8b(void *$m64);
// cmpxchg16b(void *$m128);
// cpuid();
// crc32($dest, $src);

pattern {
    asm cwd;
} code {
    renew $cpu.ax as v1;
    commit v1;
    renew $cpu.dx_ax as v2;
    v2.svalue = v1.svalue;
    commit v2;
}

pattern {
    asm cdq;
} code {
    renew $cpu.eax as v1;
    commit v1;
    renew $cpu.edx_eax as v2;
    v2.svalue = v1.svalue;
    commit v2;
}

pattern {
    asm dec $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value - 1;
    commit v2;
    $flags.SF = v2.svalue < 0;
    $flags.ZF = v2.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm div $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.edx_eax as v2;
    commit v2;
    renew $cpu.edx as v3;
    v3.uvalue = v2.uvalue % v1.uvalue;
    commit v3;
    renew $cpu.eax as v4;
    v4.uvalue = v2.uvalue / v1.uvalue;
    commit v4;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm div $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.dx_ax as v2;
    commit v2;
    renew $cpu.dx as v3;
    v3.uvalue = v2.uvalue % v1.uvalue;
    commit v3;
    renew $cpu.ax as v4;
    v4.uvalue = v2.uvalue / v1.uvalue;
    commit v4;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm div $1;
    assert($1.bits == 8);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ah as v3;
    v3.uvalue = v2.uvalue % v1.uvalue;
    commit v3;
    renew $cpu.al as v4;
    v4.uvalue = v2.uvalue / v1.uvalue;
    commit v4;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

// asm enter $1, $2;

// asm hlt;

pattern {
    asm idiv $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.edx_eax as v2;
    commit v2;
    renew $cpu.edx as v3;
    v3.svalue = v2.svalue % v1.svalue;
    commit v3;
    renew $cpu.eax as v4;
    v4.svalue = v2.svalue / v1.svalue;
    commit v4;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm idiv $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.dx_ax as v2;
    commit v2;
    renew $cpu.dx as v3;
    v3.svalue = v2.svalue % v1.svalue;
    commit v3;
    renew $cpu.ax as v4;
    v4.svalue = v2.svalue / v1.svalue;
    commit v4;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm idiv $1;
    assert($1.bits == 8);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ah as v3;
    v3.svalue = v2.svalue % v1.svalue;
    commit v3;
    renew $cpu.al as v4;
    v4.svalue = v2.svalue / v1.svalue;
    commit v4;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm imul $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew $cpu.eax_eax as v3;
    v3.svalue = v2.svalue * v1.svalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm imul $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ax_ax as v3;
    v3.svalue = v2.svalue * v1.svalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm imul $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.svalue = v1.svalue * v2.svalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm imul $1, $2, $3;
} code {
    renew $2 as v1;
    commit v1;
    renew $3 as v2;
    commit v2;
    renew $1 as v3;
    v3.svalue = v1.svalue * v2.svalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

// asm in $dest, $src;

pattern {
    asm inc $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.value = v1.value + 1;
    commit v2;
    $flags.SF = v2.svalue < 0;
    $flags.ZF = v2.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

// insb();
// insw();
// insd();
// int3();
// int($a);
// into();
// invd();
// invlpg($m);
// invpcid($dest, $src);
// iret();
// iretd();

pattern {
    asm ja $1;
} code {
    if (!($flags.ZF || $flags.CF)) {
        goto $1.avalue;
    }
}

pattern {
    asm jae $1;
} code {
    if ($flags.CF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jb $1;
} code {
    if ($flags.CF) {
        goto $1.avalue;
    }
}

pattern {
    asm jbe $1;
} code {
    if ($flags.ZF || $flags.CF) {
        goto $1.avalue;
    }
}

pattern {
    asm jc $1;
} code {
    if ($flags.CF) {
        goto $1.avalue;
    }
}

pattern {
    asm jcxz $1;
} code {
    if ($cpu.cx.value == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jecxz $1;
} code {
    if ($cpu.ecx.value == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm je $1;
} code {
    if ($flags.ZF) {
        goto $1.avalue;
    }
}

pattern {
    asm jg $1;
} code {
    if (!$flags.ZF && $flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jge $1;
} code {
    if ($flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jl $1;
} code {
    if (!$flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jle $1;
} code {
    if ($flags.ZF && !$flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jmp $1;
} code {
    goto $1.avalue;
}

pattern {
    asm jna $1;
} code {
    if ($flags.ZF || $flags.CF) {
        goto $1.avalue;
    }
}

pattern {
    asm jnae $1;
} code {
    if ($flags.CF) {
        goto $1.avalue;
    }
}

pattern {
    asm jnb $1;
} code {
    if ($flags.CF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jnb $1;
} code {
    if (!$flags.ZF && !$flags.CF) {
        goto $1.avalue;
    }
}

pattern {
    asm jnc $1;
} code {
    if ($flags.CF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jne $1;
} code {
    if ($flags.ZF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jng $1;
} code {
    if ($flags.ZF || !$flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jnge $1;
} code {
    if (!$flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jnl $1;
} code {
    if ($flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jnle $1;
} code {
    if (!$flags.ZF && $flags.SFeqOF) {
        goto $1.avalue;
    }
}

pattern {
    asm jno $1;
} code {
    if ($flags.OF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jnp $1;
} code {
    if ($flags.PF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jns $1;
} code {
    if ($flags.SF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jnz $1;
} code {
    if ($flags.ZF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm jo $1;
} code {
    if ($flags.OF == 1) {
        goto $1.avalue;
    }
}

pattern {
    asm jp $1;
} code {
    if ($flags.PF == 1) {
        goto $1.avalue;
    }
}

pattern {
    asm jpe $1;
} code {
    if ($flags.PF == 1) {
        goto $1.avalue;
    }
}

pattern {
    asm jpo $1;
} code {
    if ($flags.PF == 0) {
        goto $1.avalue;
    }
}

pattern {
    asm js $1;
} code {
    if ($flags.SF) {
        goto $1.avalue;
    }
}

pattern {
    asm jz $1;
} code {
    if ($flags.ZF) {
        goto $1.avalue;
    }
}

// lahf();
// lar($dest, $src);
// lds(void *$dest, void *$src);
// les(void *$dest, void *$src);
// lfs(void *$dest, void *$src);
// lgs(void *$dest, void *$src);

pattern {
    asm lea $1, $2;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.type = $type.ptr($2.type);
    v1.value = $2.addr;
    commit v1;
}

// lfence();
// lgdt($m1632);
// lidt($m1632);
// lldt($src);
// lmsw($src);
// lock();

pattern {
    assert($flags.DF == 0);
    asm lodsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.al as v2;
    v2.value = *v1.pvalue;
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue + 1;
    update $cpu.al;
    update $cpu.esi;
}

pattern {
    assert($flags.DF == 1);
    asm lodsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.al as v2;
    v2.value = *v1.pvalue;
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue - 1;
    update $cpu.al;
    update $cpu.esi;
}

pattern {
    assert($flags.DF == 0);
    asm lodsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.ax as v2;
    v2.value = *v1.pvalue;
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue + 2;
    update $cpu.ax;
    update $cpu.esi;
}

pattern {
    assert($flags.DF == 1);
    asm lodsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.ax as v2;
    v2.value = *v1.pvalue;
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue - 2;
    update $cpu.ax;
    update $cpu.esi;
}

pattern {
    assert($flags.DF == 0);
    asm lodsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.eax as v2;
    v2.value = *v1.pvalue;
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue + 4;
    update $cpu.eax;
    update $cpu.esi;
}

pattern {
    assert($flags.DF == 1);
    asm lodsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.eax as v2;
    v2.value = *v1.pvalue;
    commit v2;
    renew v1 as v3;
    v3.pvalue = v1.pvalue - 4;
    update $cpu.eax;
    update $cpu.esi;
}

pattern {
    assert($flags.DF == 0);
    asm rep lodsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    for (;;) {
        join v5 to v2;
        if (v2.uvalue == 0) {
            break;
        }
        renew $cpu.al as v3;
        v3.value = *v1.pvalue;
        commit v3;
        join v4 to v1;
        renew v1 as v4;
        v4.pvalue = v4.pvalue + 1;
        renew v2 as v5;
        v5.uvalue = v2.uvalue - 1;
        commit v5;
    }
    update $cpu.eax;
    update $cpu.esi;
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    assert($flags.DF == 1);
    asm rep lodsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    for (;;) {
        join v5 to v2;
        if (v2.uvalue == 0) {
            break;
        }
        renew $cpu.al as v3;
        v3.value = *v1.pvalue;
        commit v3;
        join v4 to v1;
        renew v1 as v4;
        v4.pvalue = v4.pvalue - 1;
        renew v2 as v5;
        v5.uvalue = v2.uvalue - 1;
        commit v5;
    }
    update $cpu.al;
    update $cpu.esi;
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    assert($flags.DF == 0);
    asm rep lodsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    for (;;) {
        join v5 to v2;
        if (v2.uvalue == 0) {
            break;
        }
        renew $cpu.ax as v3;
        v3.value = *v1.pvalue;
        commit v3;
        join v4 to v1;
        renew v1 as v4;
        v4.pvalue = v4.pvalue + 2;
        renew v2 as v5;
        v5.uvalue = v2.uvalue - 1;
        commit v5;
    }
    update $cpu.ax;
    update $cpu.esi;
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    assert($flags.DF == 1);
    asm rep lodsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    for (;;) {
        join v5 to v2;
        if (v2.uvalue == 0) {
            break;
        }
        renew $cpu.ax as v3;
        v3.value = *v1.pvalue;
        commit v3;
        join v4 to v1;
        renew v1 as v4;
        v4.pvalue = v4.pvalue - 2;
        renew v2 as v5;
        v5.uvalue = v2.uvalue - 1;
        commit v5;
    }
    update $cpu.ax;
    update $cpu.esi;
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    assert($flags.DF == 0);
    asm rep lodsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    for (;;) {
        join v5 to v2;
        if (v2.uvalue == 0) {
            break;
        }
        renew $cpu.eax as v3;
        v3.value = *v1.pvalue;
        commit v3;
        join v4 to v1;
        renew v1 as v4;
        v4.pvalue = v4.pvalue + 4;
        renew v2 as v5;
        v5.uvalue = v2.uvalue - 1;
        commit v5;
    }
    update $cpu.eax;
    update $cpu.esi;
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    assert($flags.DF == 1);
    asm rep lodsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.ecx as v2;
    commit v2;
    for (;;) {
        join v5 to v2;
        if (v2.uvalue == 0) {
            break;
        }
        renew $cpu.eax as v3;
        v3.value = *v1.pvalue;
        commit v3;
        join v4 to v1;
        renew v1 as v4;
        v4.pvalue = v4.pvalue - 4;
        renew v2 as v5;
        v5.uvalue = v2.uvalue - 1;
        commit v5;
    }
    update $cpu.eax;
    update $cpu.esi;
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    asm loop $1;
} code {
    renew $cpu.ecx as v1;
    commit v1;
    if (v1.uvalue) {
        goto $1.avalue;
    }
    assert($cpu.cl.uvalue == 0);
    assert($cpu.ch.uvalue == 0);
    assert($cpu.cx.uvalue == 0);
    assert($cpu.ecx.uvalue == 0);
}

pattern {
    asm loope $1;
} code {
    renew $cpu.ecx as v1;
    commit v1;
    if (v1.uvalue || $flags.ZF) {
        goto $1.avalue;
    }
}

pattern {
    asm loopne $1;
} code {
    renew $cpu.ecx as v1;
    commit v1;
    if (v1.uvalue || !$flags.ZF) {
        goto $1.avalue;
    }
}

pattern {
    asm loopnz $1;
} code {
    renew $cpu.ecx as v1;
    commit v1;
    if (v1.uvalue || !$flags.ZF) {
        goto $1.avalue;
    }
}

pattern {
    loopz $1;
} code {
    renew $cpu.ecx as v1;
    commit v1;
    if (v1.uvalue || $flags.ZF) {
        goto $1.avalue;
    }
}

// lsl($dest, $src);
// ltr($src);
// mfence();
// monitor();

pattern {
    mov $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    v2.value = v1.value;
    commit v2;
    assert(v1.value == v2.value);
}

pattern {
    asm movbe $1, $2;
    assert($1.bits == 32);
} code {
    new v1;
    v1.addr = $2.addr;
    v1.bits = 32;
    commit v1;
    new v2;
    v2.bits = 8;
    v2.uvalue = (v1 & 0xFF);
    commit v2;
    new v3;
    v3.bits = 8;
    v3.uvalue = ((v1 >> 8) & 0xFF);
    commit v3;
    new v4;
    v4.bits = 8;
    v4.uvalue = ((v1 >> 16) & 0xFF);
    commit v4;
    new v5;
    v5.bits = 8;
    v5.uvalue = ((v1 >> 24) & 0xFF);
    commit v5;
    new v6;
    v6.bits = 16;
    v6.uvalue = ((v2.uvalue << 8) | v3.uvalue)
    commit v6;
    new v7;
    v7.bits = 16;
    v7.uvalue = ((v4.uvalue << 8) | v5.uvalue)
    commit v7;
    new v8;
    v8.addr = $1.addr;
    v8.bits = 32;
    v8.uvalue = ((v6.uvalue << 16) | v7.uvalue);
    update $1;
}

pattern {
    asm movbe $1, $2;
    assert($1.bits == 16);
} code {
    new v1;
    v1.addr = $2.addr;
    v1.bits = 16;
    commit v1;
    new v2;
    v2.bits = 8;
    v2.uvalue = (v1 & 0xFF);
    commit v2;
    new v3;
    v3.bits = 8;
    v3.uvalue = ((v1 >> 8) & 0xFF);
    commit v3;
    new v4;
    v4.addr = $1;
    v4.bits = 16;
    v4.uvalue = (v3.uvalue | (v2.uvalue << 8));
    commit v4;
}

pattern {
    movnti $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    v2.value = v1.value;
    commit v2;
    assert(v1.value == v2.value);
}

pattern {
    assert($flags.DF == 0);
    asm movsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x8);
    commit v2;
    new v3;
    v3.addr = v1.pvalue
    v3.bits = 8;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v4.bits = 8;
    v4.value = v3.value;
    commit v4;
    renew v1 as v5;
    v5.value = v1.value + 1;
    commit v5;
    renew v1 as v6;
    v6.value = v2.value + 1;
    commit v6;
}

pattern {
    assert($flags.DF == 1);
    asm movsb;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x8);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x8);
    commit v2;
    new v3;
    v3.addr = v1.pvalue
    v3.bits = 8;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v4.bits = 8;
    v4.value = v3.value;
    commit v4;
    renew v1 as v5;
    v5.value = v1.value - 1;
    commit v5;
    renew v1 as v6;
    v6.value = v2.value - 1;
    commit v6;
}

pattern {
    assert($flags.DF == 0);
    asm movsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x16);
    commit v2;
    new v3;
    v3.addr = v1.pvalue
    v3.bits = 16;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v4.bits = 16;
    v4.value = v3.value;
    commit v4;
    renew v1 as v5;
    v5.value = v1.value + 2;
    commit v5;
    renew v1 as v6;
    v6.value = v2.value + 2;
    commit v6;
}

pattern {
    assert($flags.DF == 1);
    asm movsw;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x16);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x16);
    commit v2;
    new v3;
    v3.addr = v1.pvalue
    v3.bits = 16;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v4.bits = 16;
    v4.value = v3.value;
    commit v4;
    renew v1 as v5;
    v5.value = v1.value - 2;
    commit v5;
    renew v1 as v6;
    v6.value = v2.value - 2;
    commit v6;
}

pattern {
    assert($flags.DF == 0);
    asm movsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x32);
    commit v2;
    new v3;
    v3.addr = v1.pvalue
    v3.bits = 32;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v4.bits = 32;
    v4.value = v3.value;
    commit v4;
    renew v1 as v5;
    v5.value = v1.value + 4;
    commit v5;
    renew v1 as v6;
    v6.value = v2.value + 4;
    commit v6;
}

pattern {
    assert($flags.DF == 1);
    asm movsd;
} code {
    renew $cpu.esi as v1;
    v1.type = $type.ptr($type.x32);
    commit v1;
    renew $cpu.edi as v2;
    v2.type = $type.ptr($type.x32);
    commit v2;
    new v3;
    v3.addr = v1.pvalue
    v3.bits = 32;
    commit v3;
    new v4;
    v4.addr = v2.pvalue;
    v4.bits = 32;
    v4.value = v3.value;
    commit v4;
    renew v1 as v5;
    v5.value = v1.value - 4;
    commit v5;
    renew v1 as v6;
    v6.value = v2.value - 4;
    commit v6;
}

pattern {
    assert($flags.DF == 0);
    asm rep movsb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.edi as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    $fn.memcpy(v2.value, v1.value, v3.uvalue);
    renew v1 as v4;
    v4.value = v1.value + v3.value;
    commit v4;
    renew v2 as v5;
    v5.value = v2.value + v3.value;
    commit v5;
    renew v3 as v6;
    v6.value = 0;
    commit v6;
    update $cpu.edi;
    update $cpu.esi;
    renew v3 as v7;
    v7.value = 0;
    commit v7;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 1);
    asm rep movsb;
} code {
    renew $cpu.esi as v1;
    commit v1;
    renew $cpu.edi as v1;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    $fn.memcpy(v2.value - v3.uvalue, v1.value - v3.uvalue, v3.uvalue);
    renew v1 as v4;
    v4.value = v1.value - v3.value;
    commit v4;
    renew v2 as v5;
    v5.value = v2.value - v3.value;
    commit v5;
    renew v3 as v6;
    v6.value = 0;
    commit v6;
    update $cpu.edi;
    update $cpu.esi;
    renew v3 as v7;
    v7.value = 0;
    commit v7;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 0);
    asm rep movsw;
} code {
    renew $cpu.esi as v1;
    commit v1;
    renew $cpu.edi as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (!v3.value) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.value = v4.value;
        commit v5;
        join v6 to v1;
        join v7 to v2;
        renew v1 as v6;
        v6.value = v1.value + 2;
        commit v6;
        renew v2 as v7;
        v7.value = v2.value + 2;
        commit v7;
        renew v3 as v8;
        v8.value = v3.value - 1;
        commit v8;
    }
    update $cpu.edi;
    update $cpu.esi;
    renew $cpu.ecx as v9;
    v9.value = 0;
    commit v9;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 1);
    asm rep movsw;
} code {
    renew $cpu.esi as v1;
    commit v1;
    renew $cpu.edi as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (!v3.value) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.value = v4.value;
        commit v5;
        join v6 to v1;
        join v7 to v2;
        renew v1 as v6;
        v6.value = v1.value - 2;
        commit v6;
        renew v2 as v7;
        v7.value = v2.value - 2;
        commit v7;
        renew v3 as v8;
        v8.value = v3.value - 1;
        commit v8;
    }
    update $cpu.edi;
    update $cpu.esi;
    renew $cpu.ecx as v9;
    v9.value = 0;
    commit v9;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 0);
    asm rep movsd;
} code {
    renew $cpu.esi as v1;
    commit v1;
    renew $cpu.edi as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (!v3.value) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.value = v4.value;
        commit v5;
        join v6 to v1;
        join v7 to v2;
        renew v1 as v6;
        v6.value = v1.value + 4;
        commit v6;
        renew v2 as v7;
        v7.value = v2.value + 4;
        commit v7;
        renew v3 as v8;
        v8.value = v3.value - 1;
        commit v8;
    }
    update $cpu.edi;
    update $cpu.esi;
    renew $cpu.ecx as v9;
    v9.value = 0;
    commit v9;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 1);
    asm rep movsd;
} code {
    renew $cpu.esi as v1;
    commit v1;
    renew $cpu.edi as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (!v3.value) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        commit v4;
        new v5;
        v5.addr = v2.pvalue;
        v5.value = v4.value;
        commit v5;
        join v6 to v1;
        join v7 to v2;
        renew v1 as v6;
        v6.value = v1.value - 4;
        commit v6;
        renew v2 as v7;
        v7.value = v2.value - 4;
        commit v7;
        renew v3 as v8;
        v8.value = v3.value - 1;
        commit v8;
    }
    update $cpu.edi;
    update $cpu.esi;
    renew $cpu.ecx as v9;
    v9.value = 0;
    commit v9;
    update $cpu.ecx;
}

pattern {
    movsx $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    v2.svalue = v1.svalue;
    commit v2;
    assert(v1.svalue == v2.svalue);
}

pattern {
    asm movzx $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    v2.uvalue = v1.uvalue;
    commit v2;
    assert(v1.uvalue == v2.uvalue);
}

pattern {
    asm mul $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew $cpu.edx_eax as v3;
    v3.uvalue = v1.uvalue * v2.uvalue;
    commit v3;
    $flags.OF = unknown;
    $flags.CF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm mul $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.dx_ax as v3;
    v3.uvalue = v1.uvalue * v2.uvalue;
    commit v3;
    $flags.OF = unknown;
    $flags.CF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm mul $1;
    assert($1.bits == 8);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    renew $cpu.ax as v3;
    v3.uvalue = v1.uvalue * v2.uvalue;
    commit v3;
    $flags.OF = unknown;
    $flags.CF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

// mwait();

pattern {
    asm neg $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.svalue = -v1.svalue;
    commit v2;
    $flags.CF = v1.uvalue != 0;
    $flags.OF = unknown;
    $flags.SF = unknown;
    $flags.ZF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm nop;
} code {
}

pattern {
    asm nop $1;
} code {
}

pattern {
    asm not $1;
} code {
    renew $1 as v1;
    commit v1;
    renew v1 as v2;
    v2.uvalue = ~v1.uvalue;
    commit v2;
}

pattern {
    asm or $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = (v1.uvalue | v2.uvalue);
    commit v3;
    $flags.SF = v3.svalue < 0;
    $flags.ZF = v3.value == 0;
    $flags.OF = 0;
    $flags.CF = 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

// out($dest, $src);
// outsb();
// outsw();
// outsd();
// rep outsb();
// rep outsw();
// rep outsd();
// pause();

pattern {
    asm pop $1;
    assert($1.bits == 32);
} code {
    renew $cpu.esp as v1;
    commit v1;
    new v2;
    v2.addr = v1.pvalue;
    v2.bits = 32;
    commit v2;
    renew $1 as v3;
    v3.value = v2;
    commit v3;
    renew v1 as v4;
    v4.value = v1.value + 4;
    commit v4;
}

pattern {
    asm pop $1;
    assert($1.bits == 16);
} code {
    renew $cpu.esp as v1;
    commit v1;
    new v2;
    v2.addr = v1.pvalue;
    v2.bits = 16;
    commit v2;
    renew $1 as v3;
    v3.value = v2;
    commit v3;
    renew v1 as v4;
    v4.value = v1.value + 2;
    commit v4;
}

pattern {
    asm pop $1;
} code {
    pop $1;
}

pattern {
    asm popad;
} code {
    pop $cpu.edi;
    pop $cpu.esi;
    pop $cpu.ebp;
    pop $cpu.esp;
    pop $cpu.ebx;
    pop $cpu.edx;
    pop $cpu.ecx;
    pop $cpu.eax;
}

pattern {
    popcnt $1, $2;
    assert sizeof($1) == 4;
} code {
    // FIXME
    ...
}

pattern {
    popcnt $1, $2;
    assert sizeof($1) == 2;
} code {
    // FIXME
    ...
}

// popf();
// popfd();
// prefetch0($m8);
// prefetch1($m8);
// prefetch2($m8);
// prefetchnta($m8);

pattern {
    asm pushad;
} code {
    new v1;
    v1.value = $cpu.esp;
    commit v1;
    push $cpu.eax;
    push $cpu.ecx;
    push $cpu.edx;
    push $cpu.ebx;
    push v1;
    push $cpu.ebp;
    push $cpu.esi;
    push $cpu.edi;
}

pattern {
    push $1;
    assert($1.bits == 32);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.esp as v2;
    commit v2;
    new v3;
    v3.addr = v2.pvalue;
    v3.value = v1.value;
    commit v3;
    renew v2 as v4;
    v4.value = v2.value - 4;
}

pattern {
    push $1;
    assert($1.bits == 16);
} code {
    renew $1 as v1;
    commit v1;
    renew $cpu.esp as v2;
    commit v2;
    new v3;
    v3.addr = v2.pvalue;
    v3.value = v1.value;
    commit v3;
    renew v2 as v4;
    v4.value = v2.value - 2;
}

// pushf();
// pushfd();
// rcl(XSIGNED $dest, XSIGNED $src);
// rcr(XSIGNED $dest, XSIGNED $src);

pattern {
    asm rol $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = $fn._rotl(v2.uvalue, v1.uvalue);
    commit v3;
}

pattern {
    asm ror $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = $fn._rotr(v2.uvalue, v1.uvalue);
    commit v3;
}

// rdmsr();
// rdpmc();
// rdrand($dest);
// rdtsc();
// rdtscp();

// rsm();
// sahf();

pattern {
    asm sal $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.svalue = v2.svalue << v1.uvalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.ZF = v3.svalue == 0;
    $flags.SF = v3.svalue < 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

pattern {
    asm sar $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.svalue = v2.svalue >> v1.uvalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.ZF = v3.svalue == 0;
    $flags.SF = v3.svalue < 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

pattern {
    asm shl $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = v2.uvalue << v1.uvalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.ZF = v3.uvalue == 0;
    $flags.SF = v3.svalue < 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

pattern {
    asm shr $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    v3.uvalue = v2.uvalue >> v1.uvalue;
    commit v3;
    $flags.CF = unknown;
    $flags.OF = unknown;
    $flags.ZF = v3.uvalue == 0;
    $flags.SF = v3.svalue < 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

pattern {
    sbb $1, $2;
} code {
    renew $2 as v1;
    commit v1;
    renew $1 as v2;
    commit v2;
    renew v2 as v3;
    if ($flags.CF) {
        v3.svalue = v2.svalue - v1.svalue - 1;
    } else {
        v3.svalue = v2.svalue - v1.svalue;
    }
    $flags.OF = v3.svalue > v1.svalue;
    $flags.ZF = v3.svalue == 0;
    $flags.SF = v3.svalue < 0;
    $flags.CF = v2.uvalue < v1.uvalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
}

pattern {
    asm scasb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 8;
    commit v3;
    $flags.OF = v2.svalue < v3.svalue;
    $flags.ZF = v2.value == v3.value;
    $flags.SF = v2.svalue < v3.svalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    if ($flags.DF == 0) {
        renew v1 as v4;
        v4.pvalue = v1.pvalue + 1;
        commit v4;
    } else {
        renew v1 as v4;
        v4.pvalue = v1.pvalue - 1;
        commit v4;
    }
    update $cpu.edi;
}

pattern {
    asm scasw;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 16;
    commit v3;
    $flags.OF = v2.svalue < v3.svalue;
    $flags.ZF = v2.value == v3.value;
    $flags.SF = v2.svalue < v3.svalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    if ($flags.DF == 0) {
        renew v1 as v4;
        v4.pvalue = v1.pvalue + 2;
        commit v4;
    } else {
        renew v1 as v4;
        v4.pvalue = v1.pvalue - 2;
        commit v4;
    }
    update $cpu.edi;
}

pattern {
    asm scasd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 32;
    commit v3;
    $flags.OF = v2.svalue < v3.svalue;
    $flags.ZF = v2.value == v3.value;
    $flags.SF = v2.svalue < v3.svalue;
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    if ($flags.DF == 0) {
        renew v1 as v4;
        v4.pvalue = v1.pvalue + 4;
        commit v4;
    } else {
        renew v1 as v4;
        v4.pvalue = v1.pvalue - 4;
        commit v4;
    }
    update $cpu.edi;
}

pattern {
    asm repe scasb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v5 to v1;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 8;
        commit v4;
        $flags.OF = v2.svalue < v3.svalue;
        $flags.ZF = v2.value == v3.value;
        $flags.SF = v2.svalue < v3.svalue;
        if ($flags.ZF == 0) {
            break;
        }
        if ($flags.DF == 0) {
            renew v1 as v5;
            v5.pvalue = v1.pvalue + 1;
            commit v5;
        } else {
            renew v1 as v5;
            v5.pvalue = v1.pvalue - 1;
            commit v5;
        }
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.edi;
    $cpu.ecx.value = unknown;
    update $cpu.ecx;
}

pattern {
    asm repe scasw;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v5 to v1;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 16;
        commit v4;
        $flags.OF = v2.svalue < v3.svalue;
        $flags.ZF = v2.value == v3.value;
        $flags.SF = v2.svalue < v3.svalue;
        if ($flags.ZF == 0) {
            break;
        }
        if ($flags.DF == 0) {
            renew v1 as v5;
            v5.pvalue = v1.pvalue + 2;
            commit v5;
        } else {
            renew v1 as v5;
            v5.pvalue = v1.pvalue - 2;
            commit v5;
        }
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.edi;
    $cpu.ecx.value = unknown;
    update $cpu.ecx;
}

pattern {
    asm repe scasd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v5 to v1;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 32;
        commit v4;
        $flags.OF = v2.svalue < v3.svalue;
        $flags.ZF = v2.value == v3.value;
        $flags.SF = v2.svalue < v3.svalue;
        if ($flags.ZF == 0) {
            break;
        }
        if ($flags.DF == 0) {
            renew v1 as v5;
            v5.pvalue = v1.pvalue + 4;
            commit v5;
        } else {
            renew v1 as v5;
            v5.pvalue = v1.pvalue - 4;
            commit v5;
        }
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.edi;
    $cpu.ecx.value = unknown;
    update $cpu.ecx;
}

alias asm repz scasb = asm repe scasb;
alias asm repz scasw = asm repe scasw;
alias asm repz scasd = asm repe scasd;

pattern {
    asm repne scasb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v5 to v1;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 8;
        commit v4;
        $flags.OF = v2.svalue < v3.svalue;
        $flags.ZF = v2.value == v3.value;
        $flags.SF = v2.svalue < v3.svalue;
        if ($flags.ZF == 1) {
            break;
        }
        if ($flags.DF == 0) {
            renew v1 as v5;
            v5.pvalue = v1.pvalue + 1;
            commit v5;
        } else {
            renew v1 as v5;
            v5.pvalue = v1.pvalue - 1;
            commit v5;
        }
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.edi;
    $cpu.ecx.value = unknown;
    update $cpu.ecx;
}

pattern {
    asm repne scasw;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v5 to v1;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 16;
        commit v4;
        $flags.OF = v2.svalue < v3.svalue;
        $flags.ZF = v2.value == v3.value;
        $flags.SF = v2.svalue < v3.svalue;
        if ($flags.ZF == 1) {
            break;
        }
        if ($flags.DF == 0) {
            renew v1 as v5;
            v5.pvalue = v1.pvalue + 2;
            commit v5;
        } else {
            renew v1 as v5;
            v5.pvalue = v1.pvalue - 2;
            commit v5;
        }
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.edi;
    $cpu.ecx.value = unknown;
    update $cpu.ecx;
}

pattern {
    asm repne scasd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        join v5 to v1;
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 32;
        commit v4;
        $flags.OF = v2.svalue < v3.svalue;
        $flags.ZF = v2.value == v3.value;
        $flags.SF = v2.svalue < v3.svalue;
        if ($flags.ZF == 1) {
            break;
        }
        if ($flags.DF == 0) {
            renew v1 as v5;
            v5.pvalue = v1.pvalue + 4;
            commit v5;
        } else {
            renew v1 as v5;
            v5.pvalue = v1.pvalue - 4;
            commit v5;
        }
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    $flags.AF = unknown;
    $flags.PF = unknown;
    $flags.CF = unknown;
    update $cpu.edi;
    $cpu.ecx.value = unknown;
    update $cpu.ecx;
}

alias asm repnz scasb = asm repne scasb;
alias asm repnz scasw = asm repne scasw;
alias asm repnz scasd = asm repne scasd;

pattern {
    asm seta $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.ZF && !$flags.CF;
    commit v1;
}

pattern {
    asm setae $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.CF;
    commit v1;
}

pattern {
    asm setb $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.CF;
    commit v1;
}

pattern {
    asm setbe $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.ZF || $flags.CF;
    commit v1;
}

pattern {
    asm setc $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.CF;
    commit v1;
}

pattern {
    asm sete $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.ZF;
    commit v1;
}

pattern {
    asm setg $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.ZF && $flags.SFeqOF;
    commit v1;
}

pattern {
    asm setge $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.SFeqOF;
    commit v1;
}

pattern {
    asm setl $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.SFeqOF;
    commit v1;
}

pattern {
    asm setle $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.ZF && !$flags.SFeqOF;
    commit v1;
}

pattern {
    asm setna $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.ZF && $flags.CF;
    commit v1;
}

pattern {
    asm setnae $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.CF;
    commit v1;
}

pattern {
    asm setnb $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.CF;
    commit v1;
}

pattern {
    asm setnbe $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.ZF && !$flags.CF;
    commit v1;
}

pattern {
    asm setnc $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.CF;
    commit v1;
}

pattern {
    asm setne $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.ZF;
    commit v1;
}

pattern {
    asm setng $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.ZF || !$flags.SFeqOF;
    commit v1;
}

pattern {
    asm setnge $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.SFeqOF;
    commit v1;
}

pattern {
    asm setnl $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.SFeqOF;
    commit v1;
}

pattern {
    asm setnle $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.ZF && $flags.SFeqOF;
    commit v1;
}

pattern {
    asm setno $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.OF;
    commit v1;
}

pattern {
    asm setnp $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.PF;
    commit v1;
}

pattern {
    asm setns $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.SF;
    commit v1;
}

pattern {
    asm setnz $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.ZF;
    commit v1;
}

pattern {
    asm seto $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.OF;
    commit v1;
}

pattern {
    asm setp $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.PF;
    commit v1;
}

pattern {
    asm setpe $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.PF;
    commit v1;
}

pattern {
    asm setpo $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = !$flags.PF;
    commit v1;
}

pattern {
    asm sets $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.SF;
    commit v1;
}

pattern {
    asm setz $1;
} code {
    new v1;
    v1.addr = $1.addr;
    v1.bits = 8;
    v1.value = $flags.ZF;
    commit v1;
}

// sfence();
// sgdt();
// shld($dest, $src, $count);   // TODO:
// shrd($dest, $src, $count);   // TODO:
// sidt($m);
// sldt($rm16);
// smsw($rm);

pattern {
    stc;
} code {
    $flags.CF = 1;
}

pattern {
    std;
} code {
    $flags.DF = 1;
}

pattern {
    sti;
} code {
    $flags.IF = 1;
}

pattern {
    assert($flags.DF == 0);
    asm stosb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 8;
    v3.value = v2.value;
    commit v3;
    renew v1 as v4;
    v4.pvalue = v1.pvalue + 1;
    update $cpu.edi;
}

pattern {
    assert($flags.DF == 1);
    asm stosb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 8;
    v3.value = v2.value;
    commit v3;
    renew v1 as v4;
    v4.pvalue = v1.pvalue - 1;
    update $cpu.edi;
}

pattern {
    assert($flags.DF == 0);
    asm stosw;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 16;
    v3.value = v2.value;
    commit v3;
    renew v1 as v4;
    v4.pvalue = v1.pvalue + 2;
    update $cpu.edi;
}

pattern {
    assert($flags.DF == 1);
    asm stosw;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 16;
    v3.value = v2.value;
    commit v3;
    renew v1 as v4;
    v4.pvalue = v1.pvalue - 2;
    update $cpu.edi;
}

pattern {
    assert($flags.DF == 0);
    asm stosd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 32;
    v3.value = v2.value;
    commit v3;
    renew v1 as v4;
    v4.pvalue = v1.pvalue + 4;
    update $cpu.edi;
}

pattern {
    assert($flags.DF == 1);
    asm stosd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    new v3;
    v3.addr = v1.pvalue;
    v3.bits = 32;
    v3.value = v2.value;
    commit v3;
    renew v1 as v4;
    v4.pvalue = v1.pvalue - 4;
    update $cpu.edi;
}

pattern {
    assert($flags.DF == 0);
    asm rep stosb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    $fn.memset(v1.pvalue, v2.value, v3.uvalue);
    renew v1 as v4;
    v4.pvalue = v1.pvalue + v3.uvalue;
    commit v4;
    update $cpu.edi;
    renew v3 as v5;
    v5.value = 0;
    commit v5;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 1);
    asm rep stosb;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.al as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    $fn.memset(v1.pvalue - v3.uvalue, v2.value, v3.uvalue);
    renew v1 as v4;
    v4.pvalue = v1.pvalue - v3.uvalue;
    commit v4;
    update $cpu.edi;
    renew v3 as v5;
    v5.value = 0;
    commit v5;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 0);
    asm rep stosw;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 16;
        v4.value = v2.value;
        commit v4;
        join v5 to v1;
        renew v1 as v5;
        v5.pvalue = v1.pvalue + 2;
        commit v5;
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    renew v3 as v7;
    v7.value = 0;
    commit v7;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 1);
    asm rep stosd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.ax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 16;
        v4.value = v2.value;
        commit v4;
        join v5 to v1;
        renew v1 as v5;
        v5.pvalue = v1.pvalue - 2;
        commit v5;
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    renew v3 as v7;
    v7.value = 0;
    commit v7;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 0);
    asm rep stosd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 32;
        v4.value = v2.value;
        commit v4;
        join v5 to v1;
        renew v1 as v5;
        v5.pvalue = v1.pvalue + 4;
        commit v5;
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    renew v3 as v7;
    v7.value = 0;
    commit v7;
    update $cpu.ecx;
}

pattern {
    assert($flags.DF == 1);
    asm rep stosd;
} code {
    renew $cpu.edi as v1;
    commit v1;
    renew $cpu.eax as v2;
    commit v2;
    renew $cpu.ecx as v3;
    commit v3;
    for (;;) {
        join v6 to v3;
        if (v3.uvalue == 0) {
            break;
        }
        new v4;
        v4.addr = v1.pvalue;
        v4.bits = 32;
        v4.value = v2.value;
        commit v4;
        join v5 to v1;
        renew v1 as v5;
        v5.pvalue = v1.pvalue - 4;
        commit v5;
        renew v3 as v6;
        v6.uvalue = v3.uvalue - 1;
        commit v6;
    }
    renew v3 as v7;
    v7.value = 0;
    commit v7;
    update $cpu.ecx;
}

// str($rm16);

pattern {
    sub $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = v1.value - v2.value;
    $flags.SF = v1.svalue < v2.svalue;
    $flags.CF = v1.uvalue < v2.uvalue;
    $flags.ZF = v1.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
}

// sysenter();
// sysexit();

pattern {
    test $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    new v1 as v3;
    v3.value = (v1.value & v2.value);
    commit v3;
    $flags.ZF = v3.value == 0;
    $flags.SF = v3.svalue < 0;
    $flags.CF = 0;
    $flags.OF = 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
}

// ud2();
// verr($rm16);
// verw($rm16);
// wait();
// fwait();
// wbinvd();
// wrmsr();

pattern {
    xadd $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = v1.value + v2.value;
    commit v3;
    renew v2 as v4;
    v4.value = v1.value;
    commit v4;
    $flags.CF = v3.uvalue < v1.uvalue;
    $flags.SF = v4.svalue < 0;
    $flags.ZF = v4.value == 0;
    $flags.OF = unknown;
    $flags.AF = unknown;
    $flags.PF = unknown;
    update $1;
    update $2;
}

pattern {
    asm xchg $1, $2;
} code {
    swap $1, $2;
}

// xgetbv();

pattern {
    asm xlat $1;
} code {
    asm xlatb;
}

pattern {
    asm xlatb;
} code {
    renew $cpu.al as v1;
    commit v1;
    renew $cpu.ebx as v2;
    v2.type = $type.ptr($type.u8);
    commit v2;
    new v3;
    v3.addr = v2.pvalue + v1.value;
    v3.bits = 8;
    commit v3;
    renew v1 as v4;
    v4.value = v3.value;
    commit v4;
    update $cpu.al;
}

pattern {
    asm xor $1, $2;
} code {
    renew $1 as v1;
    commit v1;
    renew $2 as v2;
    commit v2;
    renew v1 as v3;
    v3.value = (v1.value ^ v2.value);
    $flags.SF = v3.svalue < 0;
    $flags.ZF = v3.value == 0;
    $flags.OF = 0;
    $flags.CF = 0;
    $flags.PF = unknown;
    $flags.AF = unknown;
    update $1;
}

// xrstor($mem);
// xsave($mem);
// xsaveopt($mem);
// xsetbv();
